#!/bin/sh
#
# orchestration
#
# chkconfig:   - 85 15
# description:  Communicates with Marathon to allocate processing
#		resources
# processname: skylr-orchestration
# config:      /etc/haproxy/haproxy.cfg  #KAP - any counterpart to this for orch?
# pidfile:     /var/run/orchestration.pid

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

exec="/mnt/skylr/orchestration/bin/orch.sh"
prog=$(basename $exec)
pidfile_name="orchestration"

config_dir="/etc/$prog"
config_main="$config_dir/$prog.cfg"
config_users="$config_dir/$(echo $prog)_users.cfg"
file_args="-f $config_main -f $config_users"

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

lockfile=/var/lock/subsys/orchestration

check() {	# irch doesn't have a 'check' function
    $exec lint
}

start() {
#    $exec -c -q $file_args

#    if [ $? -ne 0 ]; then
#        echo "Errors in configuration file, check with $prog check."
#        return 1
#    fi

    echo -n $"Starting $prog: "
    # start it up here, usually something like "daemon $exec"
    #daemon $exec -D $file_args -p /var/run/$prog.pid
    #daemon $exec run dev -p /var/run/orchestration.pid &
    #daemon $exec run dev -p /var/run/$prog.pid
    daemon $exec run dev -p /var/run/$pidfile_name.pid
    retval=$?
    echo retval = $retval
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    # stop it here, often "killproc $prog" (or maybe -p <pidfile>)
    #killproc -p /var/run/orchestration.pid
    killproc -p /var/run/$pidfile_name.pid
    retval=$?
    echo
    echo retval = $retval
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
#    $exec -c -q $file_args
#    if [ $? -ne 0 ]; then
#        echo "Errors in configuration file, check with $prog check."
#        return 1
#    fi
    stop
    start
}

reload() {
#    $exec -c -q $file_args
#    if [ $? -ne 0 ]; then
#        echo "Errors in configuration file, check with $prog check."
#        return 1
#    fi
    echo -n $"Reloading $prog: "
#    $exec -D $file_args -p /var/run/$prog.pid -sf $(cat /var/run/$prog.pid)
    $exec
    retval=$?
    echo
    return $retval
}

force_reload() {
    restart
}

fdr_status() {
    #status $prog
    status $pidfile_name
}

case "$1" in
    start|stop|restart|reload)
        $1
        ;;
    force-reload)
        force_reload
        ;;
    check)
        check
        ;;
    status)
        fdr_status
        ;;
    condrestart|try-restart)
  	[ ! -f $lockfile ] || restart
	;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|try-restart|reload|force-reload}"
        exit 2
esac
